/* 
 * Author: Justin Masse

 * SASS Mixins
 */


/*
-----------------------
      Variables
-----------------------
*/



/*
-----------------------
        IMPORTS
-----------------------
*/
 @import "breakpoints";

/*
-----------------------
        FUNCTIONS
-----------------------

-----------------------------------------
*Set a rem font size with pixel fallback*
-----------------------------------------

Rem is similar to the em value, but instead of being relative to the parent element it’srelative to the font-size set in the <html>.
It has all the benefits of em but you don’t get issues with e.g (compounding) since rem is only relative to the html element. 
The bad part is there’s no support for rem units in IE8 and below. But with this mixin we can create a fallback to pixels when rem isn’t supported.

-------------
    Usage
-------------
p {
  @include font-size(14px)
}

-------------
   Output
-------------
p {
  font-size: 14px; //Will be overridden if browser supports rem
  font-size: 0.8rem;
}
*/
@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

/*
-----------------------------------------
*Set rem line height with pixel fallback*
-----------------------------------------

This mixin sets the line height in rem's with a px fallback.

-------------
    Usage
-------------
body {
  @include line-height (16);
}

-------------
   Output
-------------
body {
  line-height: 16px;
  line-height: 2rem;
}
*/
@mixin line-height($heightValue: 12 ){
	line-height: $heightValue + px; //fallback for old browsers
	line-height: (0.125 * $heightValue) + rem;
}

/*
-----------------------------------------
*******Animations and keyframes**********
-----------------------------------------

Animations are always a pain to create with all the vendor prefixes and what not. 
But with the help of this mixin it will boil down to just a few lines of code.

-------------
    Usage
-------------
@include keyframes(slide-down) {
  0% { opacity: 1; }
  90% { opacity: 0; }
}

.element {
  width: 100px;
  height: 100px;
  background: black;
  @include animation('slide-down 5s 3');
}
*/
@mixin keyframes($animation-name) {
  @-webkit-keyframes $animation-name {
    @content;
  }
  @-moz-keyframes $animation-name {
    @content;
  }  
  @-ms-keyframes $animation-name {
    @content;
  }
  @-o-keyframes $animation-name {
    @content;
  }  
  @keyframes $animation-name {
    @content;
  }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};      
}

/*
-----------------------------------------
***************Transitions***************
-----------------------------------------

As with animations, transitions also make your code quite bloated which can hurt the readability. 
But this is also solved by using a mixin for it.

-------------
    Usage
-------------
a {
  color: gray;
  @include transition(color .3s ease);
  &:hover {
    color: black;
  }
}
*/
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

/*
-----------------------------------------
**********Cross browser opacity**********
-----------------------------------------

This mixin ensures cross browser opacity all the way down to Internet Explorer 5. 
Though if you have to optomize for IE5, you have a lot bigger problems than opacity, godspeed my friend.

-------------
    Usage
-------------
.faded-text {
  @include opacity(0.8);
}
*/
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

/*
-----------------------------------------
****************Clearfix*****************
-----------------------------------------

There’s a lot of different clearfix hacks out there on the web. 
This one is created by (Nicolas Gallagher) and I’ve found it to be the most solid one. Works in IE6 and up.

-------------
    Usage
-------------
.container-with-floated-children {
  @extend %clearfix;
}
*/
%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

/*
-----------------------------------------
*******Visually hide an element**********
-----------------------------------------

When you hide an element with display: none, that prevents screen readers from reading it to the user. 
Sometimes that’s fine, but in other cases this will make the site hard to use for people with screen readers. 
Thus, we have to use another technique for hiding elements while at the same time make them accessible.
In this example, we are using the Sass placeholder selector since the output will always be the same, 
which enables us to reduce repetetive code in the output.

-------------
    Usage
-------------
<button class="mobile-navigation-trigger">
  <b class="visually-hidden">Open the navigation</b>
  <img src="img/mobile-navigation-icon.svg">
</button>
.visually-hidden {
  @extend %visuallyhidden;
}
*/
%visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

/*
-----------------------------------------
************Retina Images****************
-----------------------------------------

This mixin by Jason Zimdars is a breeze to use and offers a greater visual 
experience to those that are lucky enough to have a retina device.

-------------
    Usage
-------------
div.logo {
   background: url("logo.png") no-repeat;
   @include image-2x("logo2x.png", 100px, 25px);
 }

 -------------
   Output
-------------
div.logo {
  background: url("logo.png") no-repeat;
}
@media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6 / 2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
  div.logo {
    background-image: url("logo2x.png");
    background-size: 100px 25px;
  }
}
*/
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

/*
-----------------------------------------
*********Absolute Positioned*************
-----------------------------------------

Pass in the desired location of your target element to produce all the necessary positioning code.

-------------
    Usage
-------------
.abs {
  @include abs-pos(10px, 10px, 5px, 15px);
}

 -------------
   Output
-------------
.abs {
  top: 10px;
  right: 10px;
  bottom: 5px;
  left: 15px;
  position: absolute;
}
*/
@mixin abs-pos ($top: auto, $right: auto, $bottom: auto, $left: auto) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: absolute;
}